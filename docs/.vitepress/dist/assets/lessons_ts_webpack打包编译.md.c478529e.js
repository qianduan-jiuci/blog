import{_ as s,o as n,c as a,Q as p}from"./chunks/framework.7204edfa.js";const l="/blog/assets/1.e43afa44.png",o="/blog/assets/2.76d031e3.png",m=JSON.parse('{"title":"第七章：打包编译","description":"","frontmatter":{},"headers":[],"relativePath":"lessons/ts/webpack打包编译.md","filePath":"lessons/ts/webpack打包编译.md","lastUpdated":1694323098000}'),e={name:"lessons/ts/webpack打包编译.md"},t=p(`<h1 id="第七章-打包编译" tabindex="-1">第七章：打包编译 <a class="header-anchor" href="#第七章-打包编译" aria-label="Permalink to &quot;第七章：打包编译&quot;">​</a></h1><h2 id="安装项目软件包" tabindex="-1">安装项目软件包 <a class="header-anchor" href="#安装项目软件包" aria-label="Permalink to &quot;安装项目软件包&quot;">​</a></h2><p><code>创建package.json</code></p><p>pnpm init</p><p><code>安装依赖包</code></p><p>pnpm i typescript webpack webpack-cli ts-loader webpack-dev-server -D</p><ul><li>typescript</li><li>webpack</li><li>webpack-cli</li><li>ts-loader : webpack处理ts的工具</li><li>webpack-dev-server： 启动一个web服务器，开发过程中可以通过地址栏可以访问项目，修改代码，自动刷新页面</li></ul><p><code>创建ts配置文件</code></p><p>tsc --init</p><h2 id="配置webpack-config-jse文件" tabindex="-1">配置webpack.config.jse文件 <a class="header-anchor" href="#配置webpack-config-jse文件" aria-label="Permalink to &quot;配置webpack.config.jse文件&quot;">​</a></h2><p>项目结构：</p><p><code>webpack配置说明</code></p><p>项目入口文件：</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	entry: </span><span style="color:#9ECBFF;">&#39;.src/index.ts&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	entry: </span><span style="color:#032F62;">&#39;.src/index.ts&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>项目编译输出位置：</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;path&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  entry: </span><span style="color:#9ECBFF;">&#39;.src/index.ts&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">//项目的入口文件</span></span>
<span class="line"><span style="color:#E1E4E8;">  output: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    filename: </span><span style="color:#9ECBFF;">&#39;app.js&#39;</span><span style="color:#E1E4E8;">,/ 项目最终打包的一个文件</span></span>
<span class="line"><span style="color:#E1E4E8;">    path: path.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(__dirname,</span><span style="color:#9ECBFF;">&#39;publicdist&#39;</span><span style="color:#E1E4E8;">), </span><span style="color:#6A737D;">//  项目最终打包的目录，引入path，为了识别当前的路径，</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  module: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    / 打包处理规则</span></span>
<span class="line"><span style="color:#E1E4E8;">    rules: [</span></span>
<span class="line"><span style="color:#E1E4E8;">      {</span></span>
<span class="line"><span style="color:#E1E4E8;">        test: \\.tsx</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">$</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 处理以tsx结尾或者ts结尾的文件，</span></span>
<span class="line"><span style="color:#E1E4E8;">        use</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;ts-loader&#39;</span><span style="color:#E1E4E8;">, / 使用什么处理器进行处理文件</span></span>
<span class="line"><span style="color:#E1E4E8;">        exclude: node_modules</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 排除node_modules文件夹不需要被处理</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    ]</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">path</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;path&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  entry: </span><span style="color:#032F62;">&#39;.src/index.ts&#39;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">//项目的入口文件</span></span>
<span class="line"><span style="color:#24292E;">  output: {</span></span>
<span class="line"><span style="color:#24292E;">    filename: </span><span style="color:#032F62;">&#39;app.js&#39;</span><span style="color:#24292E;">,/ 项目最终打包的一个文件</span></span>
<span class="line"><span style="color:#24292E;">    path: path.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(__dirname,</span><span style="color:#032F62;">&#39;publicdist&#39;</span><span style="color:#24292E;">), </span><span style="color:#6A737D;">//  项目最终打包的目录，引入path，为了识别当前的路径，</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  module: {</span></span>
<span class="line"><span style="color:#24292E;">    / 打包处理规则</span></span>
<span class="line"><span style="color:#24292E;">    rules: [</span></span>
<span class="line"><span style="color:#24292E;">      {</span></span>
<span class="line"><span style="color:#24292E;">        test: \\.tsx</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">$</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 处理以tsx结尾或者ts结尾的文件，</span></span>
<span class="line"><span style="color:#24292E;">        use</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;ts-loader&#39;</span><span style="color:#24292E;">, / 使用什么处理器进行处理文件</span></span>
<span class="line"><span style="color:#24292E;">        exclude: node_modules</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 排除node_modules文件夹不需要被处理</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    ]</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="配置webpack的编译命令" tabindex="-1">配置webpack的编译命令 <a class="header-anchor" href="#配置webpack的编译命令" aria-label="Permalink to &quot;配置webpack的编译命令&quot;">​</a></h2><p>修改package.json 添加编译命令：</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&quot;scripts&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;dev&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;webpack-dev-server --mode=development&#39;, /添加开发时的命令， --mode指定开发模</span><span style="color:#FDAEB7;font-style:italic;">式</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;build&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;webpack --mode=production&quot;</span><span style="color:#E1E4E8;">, /添加生产时候的命令： --mode指定生产模式</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&quot;scripts&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;dev&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;webpack-dev-server --mode=development&#39;, /添加开发时的命令， --mode指定开发模</span><span style="color:#B31D28;font-style:italic;">式</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;build&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;webpack --mode=production&quot;</span><span style="color:#24292E;">, /添加生产时候的命令： --mode指定生产模式</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>添加首页文件： index.html 使用pnpm dev运行项目 整个开发过程中，所有的数据都会加载到内存当中 <img src="`+l+`" alt="image.png"></p><h2 id="webpack自动更新处理" tabindex="-1">webpack自动更新处理 <a class="header-anchor" href="#webpack自动更新处理" aria-label="Permalink to &quot;webpack自动更新处理&quot;">​</a></h2><p>在开发模式中下，所有的代码都被编译保存再内存中，如果我们想要拿到最新的代码，需要从内存中拿代码 在index。html中加载的js文件，咱目录下是根本没有的，这时候，在webpack配置了publicpath时候，webpack会从内存中读取读取这个数据</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;path&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  entry: </span><span style="color:#9ECBFF;">&#39;.src/index.ts&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">//项目的入口文件</span></span>
<span class="line"><span style="color:#E1E4E8;">  output: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    filename: </span><span style="color:#9ECBFF;">&#39;app.js&#39;</span><span style="color:#E1E4E8;">,/ 项目最终打包的一个文件</span></span>
<span class="line"><span style="color:#E1E4E8;">    path: path.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(__dirname,</span><span style="color:#9ECBFF;">&#39;publicdist&#39;</span><span style="color:#E1E4E8;">), </span><span style="color:#6A737D;">//  项目最终打包的目录，引入path，为了识别当前的路径，</span></span>
<span class="line"><span style="color:#E1E4E8;">    publicPath: </span><span style="color:#9ECBFF;">&#39;dist/&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#6A737D;">//表示资源在生产模式下的根路径</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  module: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    / 打包处理规则</span></span>
<span class="line"><span style="color:#E1E4E8;">    rules: [</span></span>
<span class="line"><span style="color:#E1E4E8;">      {</span></span>
<span class="line"><span style="color:#E1E4E8;">        test: \\.tsx</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">$</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 处理以tsx结尾或者ts结尾的文件，</span></span>
<span class="line"><span style="color:#E1E4E8;">        use</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;ts-loader&#39;</span><span style="color:#E1E4E8;">, / 使用什么处理器进行处理文件</span></span>
<span class="line"><span style="color:#E1E4E8;">        exclude: node_modules</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 排除node_modules文件夹不需要被处理</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    ]</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">path</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;path&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  entry: </span><span style="color:#032F62;">&#39;.src/index.ts&#39;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">//项目的入口文件</span></span>
<span class="line"><span style="color:#24292E;">  output: {</span></span>
<span class="line"><span style="color:#24292E;">    filename: </span><span style="color:#032F62;">&#39;app.js&#39;</span><span style="color:#24292E;">,/ 项目最终打包的一个文件</span></span>
<span class="line"><span style="color:#24292E;">    path: path.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(__dirname,</span><span style="color:#032F62;">&#39;publicdist&#39;</span><span style="color:#24292E;">), </span><span style="color:#6A737D;">//  项目最终打包的目录，引入path，为了识别当前的路径，</span></span>
<span class="line"><span style="color:#24292E;">    publicPath: </span><span style="color:#032F62;">&#39;dist/&#39;</span><span style="color:#24292E;">,</span><span style="color:#6A737D;">//表示资源在生产模式下的根路径</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  module: {</span></span>
<span class="line"><span style="color:#24292E;">    / 打包处理规则</span></span>
<span class="line"><span style="color:#24292E;">    rules: [</span></span>
<span class="line"><span style="color:#24292E;">      {</span></span>
<span class="line"><span style="color:#24292E;">        test: \\.tsx</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">$</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 处理以tsx结尾或者ts结尾的文件，</span></span>
<span class="line"><span style="color:#24292E;">        use</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;ts-loader&#39;</span><span style="color:#24292E;">, / 使用什么处理器进行处理文件</span></span>
<span class="line"><span style="color:#24292E;">        exclude: node_modules</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 排除node_modules文件夹不需要被处理</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    ]</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><img src="`+o+`" alt="image.png"></p><h2 id="ts中支持import-与-export" tabindex="-1">ts中支持import 与 export <a class="header-anchor" href="#ts中支持import-与-export" aria-label="Permalink to &quot;ts中支持import 与 export&quot;">​</a></h2><p>在ts中修改几个地方，让它支持模块 ----- 将ts.confing.json中的module改为es6 webpack在处理的时候，如果发现导入的文件没有使用，他会把文件导入的过程给忽略掉，当开始使用的时候，就出问题了 提出问题？ 为什么绘制找不到呢？ 解答问题： 因为这是ts，使用js的模块化，他可以自动追踪到js，但是追踪不到ts 解决问题:<br> 在webpack中增加配置和module同级：</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">: {</span><span style="color:#B392F0;">extensions</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&#39;.ts&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&#39;.tsx&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&#39;.js&#39;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> 当引入一个文件的时候， 他会试图先查找ts, 如果ts没有，查找tsx, 最后js,第一个优先级是最高的</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">: {</span><span style="color:#6F42C1;">extensions</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&#39;.ts&#39;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;.tsx&#39;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;.js&#39;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> 当引入一个文件的时候， 他会试图先查找ts, 如果ts没有，查找tsx, 最后js,第一个优先级是最高的</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>命名空间的导入导出也是完全支持的</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> name</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;九辞&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">namespace</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">User</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> title</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;jiuci.com&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> name</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">string</span><span style="color:#24292E;">  </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;九辞&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">namespace</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> title</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;jiuci.com&#39;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> {name,User} </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;.user&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(name);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(User.title);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> {name,User} </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;.user&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(name);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(User.title);</span></span></code></pre></div><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;path&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  entry: </span><span style="color:#9ECBFF;">&#39;.src/index.ts&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">//项目的入口文件</span></span>
<span class="line"><span style="color:#E1E4E8;">  output: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    filename: </span><span style="color:#9ECBFF;">&#39;app.js&#39;</span><span style="color:#E1E4E8;">,/ 项目最终打包的一个文件</span></span>
<span class="line"><span style="color:#E1E4E8;">    path: path.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(__dirname,</span><span style="color:#9ECBFF;">&#39;publicdist&#39;</span><span style="color:#E1E4E8;">), </span><span style="color:#6A737D;">//  项目最终打包的目录，引入path，为了识别当前的路径，</span></span>
<span class="line"><span style="color:#E1E4E8;">    publicPath: </span><span style="color:#9ECBFF;">&#39;dist/&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#6A737D;">//表示资源在生产模式下的根路径</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  module: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    / 打包处理规则</span></span>
<span class="line"><span style="color:#E1E4E8;">    rules: [</span></span>
<span class="line"><span style="color:#E1E4E8;">      {</span></span>
<span class="line"><span style="color:#E1E4E8;">        test: \\.tsx</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">$</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 处理以tsx结尾或者ts结尾的文件，</span></span>
<span class="line"><span style="color:#E1E4E8;">        use</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;ts-loader&#39;</span><span style="color:#E1E4E8;">, / 使用什么处理器进行处理文件</span></span>
<span class="line"><span style="color:#E1E4E8;">        exclude: node_modules</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 排除node_modules文件夹不需要被处理</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    ]</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  resolve: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    extensions: [</span><span style="color:#9ECBFF;">&#39;.ts&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&#39;.tsx&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&#39;.js&#39;</span><span style="color:#E1E4E8;">],/ 导入文件的时候，文件的查找规则，优先查找.ts的文件，如果ts的文件没有找到，会找.tsx的文件，最后是js文件</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">path</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;path&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  entry: </span><span style="color:#032F62;">&#39;.src/index.ts&#39;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">//项目的入口文件</span></span>
<span class="line"><span style="color:#24292E;">  output: {</span></span>
<span class="line"><span style="color:#24292E;">    filename: </span><span style="color:#032F62;">&#39;app.js&#39;</span><span style="color:#24292E;">,/ 项目最终打包的一个文件</span></span>
<span class="line"><span style="color:#24292E;">    path: path.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(__dirname,</span><span style="color:#032F62;">&#39;publicdist&#39;</span><span style="color:#24292E;">), </span><span style="color:#6A737D;">//  项目最终打包的目录，引入path，为了识别当前的路径，</span></span>
<span class="line"><span style="color:#24292E;">    publicPath: </span><span style="color:#032F62;">&#39;dist/&#39;</span><span style="color:#24292E;">,</span><span style="color:#6A737D;">//表示资源在生产模式下的根路径</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  module: {</span></span>
<span class="line"><span style="color:#24292E;">    / 打包处理规则</span></span>
<span class="line"><span style="color:#24292E;">    rules: [</span></span>
<span class="line"><span style="color:#24292E;">      {</span></span>
<span class="line"><span style="color:#24292E;">        test: \\.tsx</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">$</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 处理以tsx结尾或者ts结尾的文件，</span></span>
<span class="line"><span style="color:#24292E;">        use</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;ts-loader&#39;</span><span style="color:#24292E;">, / 使用什么处理器进行处理文件</span></span>
<span class="line"><span style="color:#24292E;">        exclude: node_modules</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 排除node_modules文件夹不需要被处理</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    ]</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  resolve: {</span></span>
<span class="line"><span style="color:#24292E;">    extensions: [</span><span style="color:#032F62;">&#39;.ts&#39;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;.tsx&#39;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;.js&#39;</span><span style="color:#24292E;">],/ 导入文件的时候，文件的查找规则，优先查找.ts的文件，如果ts的文件没有找到，会找.tsx的文件，最后是js文件</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,31),c=[t];function r(E,y,i,d,F,u){return n(),a("div",null,c)}const b=s(e,[["render",r]]);export{m as __pageData,b as default};
